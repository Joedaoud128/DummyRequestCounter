name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_IMAGE: ${{ secrets.DOCKER_USERNAME }}/dummy-request-counter
  
jobs:
  # ==================== CODE QUALITY JOBS ====================
  code-quality:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-quality-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-quality-
          ${{ runner.os }}-pip-
    
    - name: Install quality tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort bandit safety pylint
        pip install -r requirements.txt
    
    - name: Run Black (code formatting check)
      run: |
        black --check --diff app/ tests/
    
    - name: Run isort (import sorting check)
      run: |
        isort --check-only --diff app/ tests/
    
    - name: Run Flake8 (linting)
      run: |
        flake8 app/ tests/ --max-line-length=88 --extend-ignore=E203,W503
    
    - name: Run Pylint (code analysis)
      run: |
        pylint app/ --disable=C0114,C0115,C0116,R0903 --exit-zero
    
    - name: Run Bandit (security linting)
      run: |
        bandit -r app/ -f json -o bandit-report.json
        bandit -r app/
    
    - name: Run Safety (dependency vulnerability check)
      run: |
        safety check --json --output safety-report.json
        safety check
    
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
        if-no-files-found: ignore

  # ==================== TESTING JOBS ====================
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-test-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-test-
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov pytest-xvfb coverage
    
    - name: Set environment variables
      run: |
        echo "REDIS_HOST=localhost" >> $GITHUB_ENV
        echo "REDIS_PORT=6379" >> $GITHUB_ENV
        echo "REDIS_DB=0" >> $GITHUB_ENV
    
    - name: Run unit tests with coverage
      run: |
        pytest tests/ -v --cov=app --cov-report=xml --cov-report=html --cov-report=term
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: always()
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
    
    - name: Upload coverage artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-reports
        path: |
          coverage.xml
          htmlcov/
        if-no-files-found: ignore

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Set environment variables
      run: |
        echo "REDIS_HOST=localhost" >> $GITHUB_ENV
        echo "REDIS_PORT=6379" >> $GITHUB_ENV
        echo "REDIS_DB=0" >> $GITHUB_ENV
    
    - name: Start application
      run: |
        uvicorn app.app:app --host 0.0.0.0 --port 8000 &
        sleep 10
    
    - name: Run integration tests
      run: |
        # Test all endpoints
        curl -f http://localhost:8000/health
        curl -f http://localhost:8000/
        curl -f http://localhost:8000/count
        curl -f http://localhost:8000/reset
        
        # Test counter functionality
        curl http://localhost:8000/reset
        INITIAL=$(curl -s http://localhost:8000/count | jq -r '.count')
        curl http://localhost:8000/
        curl http://localhost:8000/
        FINAL=$(curl -s http://localhost:8000/count | jq -r '.count')
        
        echo "Initial count: $INITIAL"
        echo "Final count: $FINAL"
        
        if [ "$FINAL" -le "$INITIAL" ]; then
          echo "Counter not working properly"
          exit 1
        fi
        
        echo "Integration tests passed!"

  end-to-end-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Create .env file
      run: |
        echo "WEB_PORT=8000" > .env
        echo "ENV=production" >> .env
        echo "REDIS_HOST=redis" >> .env
        echo "REDIS_PORT=6379" >> .env
        echo "REDIS_DB=0" >> .env
        echo "REDIS_PASSWORD=" >> .env
    
    - name: Start full application stack
      run: |
        docker-compose up -d
        sleep 20
    
    - name: Run E2E tests
      run: |
        # Test application health
        curl -f http://localhost:8000/health
        
        # Test complete user workflow
        echo "Testing complete user workflow..."
        
        # Reset counter
        curl -X GET http://localhost:8000/reset
        
        # Simulate user visits
        for i in {1..5}; do
          echo "Visit $i"
          curl http://localhost:8000/
          sleep 1
        done
        
        # Check final count
        COUNT=$(curl -s http://localhost:8000/count | jq -r '.count')
        echo "Final count: $COUNT"
        
        if [ "$COUNT" -ne 5 ]; then
          echo "E2E test failed: Expected count 5, got $COUNT"
          exit 1
        fi
        
        # Test data persistence
        echo "Testing data persistence..."
        docker-compose restart
        sleep 15
        
        PERSISTED_COUNT=$(curl -s http://localhost:8000/count | jq -r '.count')
        echo "Persisted count: $PERSISTED_COUNT"
        
        if [ "$PERSISTED_COUNT" -ne "$COUNT" ]; then
          echo "Data persistence failed"
          exit 1
        fi
        
        echo "E2E tests passed!"
    
    - name: Cleanup E2E environment
      if: always()
      run: |
        docker-compose logs
        docker-compose down -v

  # ==================== BUILD JOBS ====================
  build:
    name: Build & Test Docker Image
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_IMAGE }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build Docker image (no push)
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64
        push: false
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        outputs: type=docker,dest=/tmp/docker-image.tar
    
    - name: Load and test Docker image
      run: |
        docker load --input /tmp/docker-image.tar
        
        # Test container startup
        docker run --name test-redis -d redis:7-alpine
        docker run --name test-app --link test-redis:redis -d -p 8000:8000 \
          -e REDIS_HOST=redis ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
        
        sleep 15
        
        # Test container health
        curl -f http://localhost:8000/health
        curl -f http://localhost:8000/
        
        # Cleanup
        docker stop test-app test-redis
        docker rm test-app test-redis
        
        echo "Docker image test passed!"
    
    - name: Upload Docker image artifact
      uses: actions/upload-artifact@v4
      with:
        name: docker-image
        path: /tmp/docker-image.tar
        retention-days: 1

  vulnerability-scan:
    name: Container Vulnerability Scan
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Download Docker image
      uses: actions/download-artifact@v4
      with:
        name: docker-image
        path: /tmp
    
    - name: Load Docker image
      run: |
        docker load --input /tmp/docker-image.tar
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Run Trivy security scan (table format)
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
        format: 'table'

  # ==================== CD JOBS ====================
  build-and-push:
    name: Build & Push to Docker Hub
    runs-on: ubuntu-latest
    needs: [end-to-end-tests, build, vulnerability-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_IMAGE }}
        tags: |
          type=ref,event=branch
          type=sha,prefix=main-
          type=raw,value=latest
          type=raw,value={{date 'YYYYMMDD-HHmmss'}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Generate build summary
      run: |
        echo "🚀 **Deployment Summary**" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "✅ **Image Published**: \`${{ env.DOCKER_IMAGE }}:latest\`" >> $GITHUB_STEP_SUMMARY
        echo "✅ **Image Tags**:" >> $GITHUB_STEP_SUMMARY
        echo "${{ steps.meta.outputs.tags }}" | sed 's/^/- /' >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "🔗 **Docker Hub**: https://hub.docker.com/r/${{ secrets.DOCKER_USERNAME }}/dummy-request-counter" >> $GITHUB_STEP_SUMMARY

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: staging
    
    steps:
    - name: Deploy to staging environment
      run: |
        echo "🚀 Deploying to staging environment..."
        echo "✅ Image: ${{ env.DOCKER_IMAGE }}:latest"
        echo "✅ Environment: staging"
        echo "📋 Would run: docker-compose -f docker-compose.staging.yml up -d"
        echo "🔗 Staging URL: https://staging.dummy-counter.com (simulated)"
        
        # In a real scenario, you would:
        # - SSH to staging server
        # - Pull the latest image
        # - Update docker-compose configuration
        # - Restart services
        # - Run health checks

  notification:
    name: Deployment Notification
    runs-on: ubuntu-latest
    needs: [build-and-push, deploy-staging]
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
    - name: Success notification
      if: needs.build-and-push.result == 'success' && needs.deploy-staging.result == 'success'
      run: |
        echo "🎉 **Deployment Successful!**"
        echo "✅ All tests passed"
        echo "✅ Security scans completed"
        echo "✅ Image published to Docker Hub"
        echo "✅ Deployed to staging"
        echo "🚀 Ready for production deployment"
    
    - name: Failure notification
      if: needs.build-and-push.result == 'failure' || needs.deploy-staging.result == 'failure'
      run: |
        echo "❌ **Deployment Failed!**"
        echo "Please check the logs and fix the issues"
        exit 1
